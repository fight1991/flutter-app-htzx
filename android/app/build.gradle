import java.text.SimpleDateFormat
import java.nio.charset.StandardCharsets
def buildOutPut = []
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def isFlutterRelease = false
def environment = "test"
if (project.hasProperty('dart-defines')) {
    def dartEnvironmentVariables = project.property('dart-defines');
    System.out.println("===========dartEnvironmentVariables===============")
    System.out.println(dartEnvironmentVariables)
    def result = java.net.URLDecoder.decode(dartEnvironmentVariables, StandardCharsets.UTF_8.name());
    System.out.println("===========result===============")
    System.out.println(result)
    def arr = result.split(',')
            .collectEntries { entry ->
                def pair = entry.split('=')
                [(pair.first()): pair.last()]
            }
    System.out.println("==============dart-defines===============")
    isFlutterRelease = arr["IS_RELEASE"]
    System.out.println("IS_RELEASE:"+isFlutterRelease)
    if("false" == isFlutterRelease){
        environment = "test"
    }else{
        environment = "production"
    }
}


apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
android {
    compileSdkVersion 29

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false //在构建Release时直接关闭lint检查
        abortOnError false
    }

    defaultConfig {
        applicationId "com.hangtian.hongtu.ydsd"
        minSdkVersion 16
        targetSdkVersion 29
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        proguardFiles fileTree('proguard/').asList().asType(String[].class)
    }

    signingConfigs {
        release {
            storeFile project.hasProperty('APP_STOREFILE') ? file(APP_STOREFILE) : null
            storePassword project.hasProperty('APP_STOREPASS') ? APP_STOREPASS : ''
            keyAlias project.hasProperty('APP_KEYALIAS') ? APP_KEYALIAS : ''
            keyPassword project.hasProperty('APP_KEYPASS') ? APP_KEYPASS : ''
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            shrinkResources false
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    BUGLY_APPID      : "e402137f1a",
                    BAIDU_MAP_API_KEY: "plNemhXRYGEAnrSeUUsFvYOBguEVH9OZ",
                    UMENG_APPKEY     : "5ec2562fdbc2ec078b5be984",
            ]
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources false
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    BUGLY_APPID      : "e402137f1a",
                    BAIDU_MAP_API_KEY: "plNemhXRYGEAnrSeUUsFvYOBguEVH9OZ",
                    UMENG_APPKEY     : "5ec2562fdbc2ec078b5be984",
            ]
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
    }
    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.outputs.all { output ->
                def outputFile = output.outputFile
                buildOutPut.add(outputFile)
            }
        }
    }
}
afterEvaluate {
    assembleRelease.doLast {
        println("begin 复制并格式化apk name ")
        for(File outPutFile:buildOutPut){
            File fromFile = outPutFile
            File dir = file(fromFile.getParentFile().getParentFile().getAbsolutePath()+File.separator+"formatApk")
            if(!dir.exists()){
                boolean  res = dir.mkdirs()
                println("doLase mkdirs############## "+res)
            }else{
                println("doLase dirExisted############## "+dir.getAbsolutePath())
            }
            def buildName = "zxsd"
            def vName = flutterVersionName.toString()
            def vCode = flutterVersionCode.toString()
            def date = new Date()
            def sdf = new SimpleDateFormat("MMdd-hhmm")
            def time = sdf.format(date)
            def apkName = buildName+"_" +environment+ '_V' + vName + "_code" + vCode + '_'+time +'_' + '.apk'

            copy {
                from fromFile
                into dir
                rename {
                    apkName
                }
            }
            println("success 复制并格式化apk name "+apkName )
        }

        buildOutPut.clear()
    }
}
dependencies {
    implementation "org.greenrobot:eventbus:3.1.1"
    //友盟统计
    api 'com.umeng.umsdk:analytics:8.1.3'
    api 'com.umeng.umsdk:common:2.1.0'
    //华拓扫码枪
    api project(":huatuoscan")
    api project(":bennenscan")
}

flutter {
    source '../..'
}
